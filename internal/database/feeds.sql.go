// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
insert into feeds(id, created_at, updated_at, url, name, user_id, last_fetched_at)
values ($1, $2, $3, $4, $5, $6, NULL)
returning id, created_at, updated_at, url, name, user_id, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
	Name      string    `json:"name"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg *CreateFeedParams) (*Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Url,
		arg.Name,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Name,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return &i, err
}

const followFeed = `-- name: FollowFeed :one
insert into feed_follows(feed_id, user_id, followed_at)
values ($1, $2, $3)
returning feed_id, user_id, followed_at
`

type FollowFeedParams struct {
	FeedID     uuid.UUID `json:"feed_id"`
	UserID     uuid.UUID `json:"user_id"`
	FollowedAt time.Time `json:"followed_at"`
}

func (q *Queries) FollowFeed(ctx context.Context, arg *FollowFeedParams) (*FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, followFeed, arg.FeedID, arg.UserID, arg.FollowedAt)
	var i FeedFollow
	err := row.Scan(&i.FeedID, &i.UserID, &i.FollowedAt)
	return &i, err
}

const getFeedFollow = `-- name: GetFeedFollow :one
select feed_id, user_id, followed_at
from feed_follows
where feed_id = $1
  AND user_id = $2
`

type GetFeedFollowParams struct {
	FeedID uuid.UUID `json:"feed_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetFeedFollow(ctx context.Context, arg *GetFeedFollowParams) (*FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollow, arg.FeedID, arg.UserID)
	var i FeedFollow
	err := row.Scan(&i.FeedID, &i.UserID, &i.FollowedAt)
	return &i, err
}

const getFeeds = `-- name: GetFeeds :many
select id, created_at, updated_at, url, name, user_id, last_fetched_at
from feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]*Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Name,
			&i.UserID,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedsToFetch = `-- name: GetNextFeedsToFetch :many
select id, created_at, updated_at, url, name, user_id, last_fetched_at
from feeds
order by last_fetched_at nulls first
limit $1
`

func (q *Queries) GetNextFeedsToFetch(ctx context.Context, limit int32) ([]*Feed, error) {
	rows, err := q.db.QueryContext(ctx, getNextFeedsToFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Name,
			&i.UserID,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
update feeds
set last_fetched_at = current_timestamp,
    updated_at      = current_timestamp
where id = $1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}

const unfollowFeed = `-- name: UnfollowFeed :exec
delete
from feed_follows
where feed_id = $1
  AND user_id = $2
`

type UnfollowFeedParams struct {
	FeedID uuid.UUID `json:"feed_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg *UnfollowFeedParams) error {
	_, err := q.db.ExecContext(ctx, unfollowFeed, arg.FeedID, arg.UserID)
	return err
}
